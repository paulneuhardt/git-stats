#!/usr/bin/env python3

import json
import re
import sys
import git
import pprint
import argparse
import yaml
import datetime
from pathlib import Path
import csv

pprint = pprint.PrettyPrinter().pprint

sob_email = re.compile('(Signed-off|Reviewed)-by: (.+) <(.+@.+)>')
developers = {}
groups = []

def list_signed_offs(message, author):
    sob = []
    emails = []
    for line in message.splitlines():
        if line.startswith('Signed-off-by:') or line.startswith('Reviewed-by:'):
            m = sob_email.match(line)
            if not m:
                continue
            name = m.group(2)
            email = m.group(3)
            if email != author and email not in emails:
                sob.append({'name': name, 'email': email})
                emails.append(email)
    return sob

# returns dev information if the group name corresponds to email,date, or None
def check_developer(email, timestamp, name):
    date = datetime.date.fromtimestamp(timestamp)
    for d in developers:
        if re.match("|".join(developers[d]['emails']), email):
            # for org, we use the name from the commit, since we don't have anything better.
            if 'organization' in developers[d]:
                return { 'name': name, 'group': d }

            for i in sorted(developers[d]['groups'], key=lambda x: x[list(x.keys())[0]]['start'], reverse=True):
                group = list(i.keys())[0]
                if date >= i[group]['start'] and date < i[group].get('end', datetime.date.max):
                    if groups and not group in groups:
                        return None
                    return { 'name': d, 'group': group }
    return None

def team_commits(refspec):
    repo = git.Repo('.')
    it = repo.iter_commits(refspec)
    for commit in it:
        if len(commit.parents) > 1:
            continue

        author = check_developer(commit.author.email, commit.authored_date, commit.author.name)
        committer = check_developer(commit.committer.email, commit.committed_date, commit.committer.name)

        sob_list = list_signed_offs(commit.message, commit.author.email)
        non_author_sob = list(map(lambda s: check_developer(s['email'], commit.authored_date, s['name']), sob_list))
        non_author_sob = list(filter(None, non_author_sob))

        if author or non_author_sob or committer:
            yield((commit, author, committer, non_author_sob))

def count_stats(data, key):
    stats = {}
    for x in set([a[key] for a in data]):
        stats[x]= sum(1 for a in data if a[key] == x)
    return stats

def get_subsystem(commit):
    files = set()
    subsystems = set()
    for d in commit.diff(commit.parents[0]):
        files.add(Path(d.a_path))
        files.add(Path(d.b_path))

    for item in files:
        if str(item).startswith('include/'):
            item = str(item).split('/')
            subsystems.add("%s/%s" % (item[0], item[1]))
            continue

        if str(item) == 'MAINTAINERS':
            subsystems.add(str(item))
            continue

        while True:
            try:
                folder = commit.tree / str(item.parent) / 'Makefile'
            except:
                item = item.parent
                if item == item.parent:
                    subsystems.add(str(item))
                    break
            else:
                subsystems.add(str(item.parent))
                break

    return list(subsystems)

# in the YAML file, we can use regexp, they need to be marked with /<regex>/
def escape_email(email):
    m = re.match("^/(.*)/$", email)
    if m:
        return m.group(1)
    else:
        return re.escape(email)

def main(args):
    num_author = 0
    num_non_author_sob = 0
    num_committer = 0
    authors = []
    committers = {}
    sobs = []
    subsystems_author = []
    subsystems_maintainer = []

    # TODO: we should probably split developers and organization in 2
    # different objects, so that we check developers first, in case there are multiple matches
    for f in args.identity:
        with open(f.name) as file:
            developers.update(yaml.safe_load(file.read()))

    # create default group if it's missing
    for d in developers:
        # escape email addresses since we will use them in regexp later
        developers[d]['emails'] = list(map(escape_email, developers[d]['emails']))

        if 'groups' not in developers[d].keys():
            if args.verbose:
                print("Missing groups for %s, adding default group" % d)
            developers[d]['groups'] = [{'default' : {'start' : datetime.date(1970,1,1)}}]

    if args.groups:
        for g in args.groups:
            groups.append(g)

    if args.verbose:
        print(developers)
        print(groups)
        print(args.show)

    commits = team_commits(args.refspec)
    for c in commits:
        commit, author, committer, non_author_sob = c

        if args.verbose > 1:
            if author or non_author_sob or committer:
                print(commit)

        if 'subsystems' in args.show:
            subsystems = get_subsystem(commit)
        else:
            subsystems = []

        if author:
            authors.append({
                'Group' : author['group'],
                'SHA' : str(commit),
                'Author': author['name'],
                'Year (author)' : datetime.date.fromtimestamp(commit.authored_date).year,
                'Month (author)' : datetime.date.fromtimestamp(commit.authored_date).month,
                'Year (commit)' : datetime.date.fromtimestamp(commit.committed_date).year,
                'Month (commit)' : datetime.date.fromtimestamp(commit.committed_date).month,
                'Files' : commit.stats.total['files'],
                'Insertions' : commit.stats.total['insertions'],
                'Deletions' : commit.stats.total['deletions'],
                'Total' : commit.stats.total['lines'],
                'Subsystem' : ';'.join(subsystems)})

            for s in subsystems:
                subsystems_author.append({
                    'Subsystem' : s,
                    'Group' : author['group'],
                    'SHA' : str(commit),
                    'Author': author['name'],
                    'Year (author)' : datetime.date.fromtimestamp(commit.authored_date).year,
                    'Month (author)' : datetime.date.fromtimestamp(commit.authored_date).month,
                    'Year (commit)' : datetime.date.fromtimestamp(commit.committed_date).year,
                    'Month (commit)' : datetime.date.fromtimestamp(commit.committed_date).month,
                    'Files' : commit.stats.total['files'],
                    'Insertions' : commit.stats.total['insertions'],
                    'Deletions' : commit.stats.total['deletions'],
                    'Total' : commit.stats.total['lines']})

        if non_author_sob:
            for a in non_author_sob:
                sobs.append({
                    'Signed-off Group' : a['group'],
                    'Signed-off Name' : a['name'],
                    'Author Group' : author['group'] if author else 'n/a',
                    'SHA' : str(commit),
                    'Author': author['name'] if author else commit.author.name.replace(',', '/'),
                    'Year (author)' : datetime.date.fromtimestamp(commit.authored_date).year,
                    'Month (author)' : datetime.date.fromtimestamp(commit.authored_date).month,
                    'Year (commit)' : datetime.date.fromtimestamp(commit.committed_date).year,
                    'Month (commit)' : datetime.date.fromtimestamp(commit.committed_date).month,
                    'Files' : commit.stats.total['files'],
                    'Insertions' : commit.stats.total['insertions'],
                    'Deletions' : commit.stats.total['deletions'],
                    'Total' : commit.stats.total['lines'],
                    'Subsystem' : ';'.join(subsystems)})

                for s in subsystems:
                    subsystems_maintainer.append({
                        'Subsystem' : s,
                        'Signed-off Group' : a['group'],
                        'Signed-off Name' : a['name'],
                        'Author Group' : author['group'] if author else 'n/a',
                        'SHA' : str(commit),
                        'Author': author['name'] if author else commit.author.name.replace(',', '/'),
                        'Year (author)' : datetime.date.fromtimestamp(commit.authored_date).year,
                        'Month (author)' : datetime.date.fromtimestamp(commit.authored_date).month,
                        'Year (commit)' : datetime.date.fromtimestamp(commit.committed_date).year,
                        'Month (commit)' : datetime.date.fromtimestamp(commit.committed_date).month,
                        'Files' : commit.stats.total['files'],
                        'Insertions' : commit.stats.total['insertions'],
                        'Deletions' : commit.stats.total['deletions'],
                        'Total' : commit.stats.total['lines']})

        if committer:
            num_committer = num_committer + 1
            committers[committer['name']] = committers.get(committer['name'], 0) + 1

    if 'commits' in args.show:
        if args.comment:
            for a in authors:
                a.update({'Comment': args.comment})

        with open('commits_author.csv', 'w', newline='') as f:
            writer = csv.DictWriter(f, authors[0].keys())
            writer.writeheader()
            writer.writerows(authors)

    if 'signedoff' in args.show:
        if args.comment:
            for a in sobs:
                a.update({'Comment': args.comment})

        with open('commits_signedoff.csv', 'w', newline='') as f:
            writer = csv.DictWriter(f, sobs[0].keys())
            writer.writeheader()
            writer.writerows(sobs)

    if 'subsystems' in args.show:
        if args.comment:
            for a in subsystems_author:
                a.update({'Comment': args.comment})
            for a in subsystems_maintainer:
                a.update({'Comment': args.comment})

        with open('subsystems_author.csv', 'w', newline='') as f:
            writer = csv.DictWriter(f, subsystems_author[0].keys())
            writer.writeheader()
            writer.writerows(subsystems_author)

        with open('subsystems_maintainer.csv', 'w', newline='') as f:
            writer = csv.DictWriter(f, subsystems_maintainer[0].keys())
            writer.writeheader()
            writer.writerows(subsystems_maintainer)

    if 'summary' in args.show:
        stats = count_stats(authors, 'Author')
        print('Authored Total: %d, %d insertions(+), %d deletions(-), %d total' %
              (len(authors), sum(a['Insertions'] for a in authors),
               sum(a['Deletions'] for a in authors), sum(a['Total'] for a in authors)))
        for n in sorted(stats, key=stats.get, reverse=True): print("%s: %s" % (n, stats[n]))

        stats = count_stats(sobs, 'Signed-off Name')
        print('\nNon-author-sob Total: %d, %d insertions(+), %d deletions(-), %d total' %
              (len(sobs), sum(a['Insertions'] for a in sobs),
               sum(a['Deletions'] for a in sobs), sum(a['Total'] for a in sobs)))
        for n in sorted(stats, key=stats.get, reverse=True): print("%s: %s" % (n, stats[n]))

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--verbose",
                        help="enable verbose output",
                        action="count",
                        default=0)
    parser.add_argument("-i", "--identity",
                        help="Identity files",
                        type=argparse.FileType('r'),
                        required=True,
                        nargs='+')
    parser.add_argument("-g", "--groups",
                        help="restrict developers from these groups",
                        type=str,
                        nargs='*')
    parser.add_argument("-r", "--refspec",
                        help="refspec to extract commits",
                        type=str)
    parser.add_argument("-s", "--show",
                        help="List of results/stats to display",
                        type=str,
                        choices=['summary', 'commits', 'signedoff', 'subsystems'],
                        default=['summary'],
                        nargs='*')
    parser.add_argument("-c", "--comment",
                        help="Add a comment/tag to each row/item",
                        type=str)

    main(parser.parse_args())
